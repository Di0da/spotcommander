#!/usr/bin/env php

<?php

/*

Copyright 2014 Ole Jon BjÃ¸rkum

This file is part of SpotCommander.

SpotCommander is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

SpotCommander is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with SpotCommander.  If not, see <http://www.gnu.org/licenses/>.

*/

chdir(__DIR__);

require_once('../main.php');

$daemon_server = stream_socket_server('unix://' . daemon_socket, $errno, $errstr);

if(!$daemon_server)
{
	echo $errno;
	exit;
}

chmod(daemon_socket, 0666);

$qdbus = daemon_qdbus_select();
$pulseaudio = daemon_pulseaudio_check();
$logind = daemon_logind_check($qdbus);

$nowplaying = null;

while($daemon_connect = stream_socket_accept($daemon_server, -1))
{
	$daemon_read = '';

	while(strpos($daemon_read, "\n") === false && !feof($daemon_connect))
	{
		$daemon_read .= fread($daemon_connect, 4096);
	}

	$daemon_read = explode("\n", $daemon_read);
	$daemon_read = json_decode($daemon_read[0], true);

	$action = $daemon_read[0];
	$data = $daemon_read[1];

	$return = null;

	if($action == 'play_pause' || $action == 'pause' || $action == 'previous' || $action == 'next' || $action == 'play_uri' || $action == 'shuffle_play_uri' || $action == 'start_track_radio')
	{
		$nowplaying = daemon_get_nowplaying();
	}

	if($action == 'spotify_launch')
	{
		daemon_inotifywait('spotify_launch');

		for($i = 0; $i < 20; $i++)
		{
			if(spotify_is_running())
			{
				$metadata = trim(shell_exec($qdbus . ' org.mpris.MediaPlayer2.spotify / org.freedesktop.MediaPlayer2.GetMetadata'));
				if(!empty($metadata)) break;
			}

			usleep(250000);
		}
	}
	elseif($action == 'spotify_quit')
	{
		exec($qdbus . ' org.mpris.MediaPlayer2.spotify / org.freedesktop.MediaPlayer2.Quit');

		for($i = 0; $i < 20; $i++)
		{
			if(!spotify_is_running()) break;
			usleep(250000);
		}
	}
	elseif($action == 'play_pause')
	{
		exec($qdbus . ' org.mpris.MediaPlayer2.spotify / org.freedesktop.MediaPlayer2.PlayPause');
	}
	elseif($action == 'pause')
	{
		exec($qdbus . ' org.mpris.MediaPlayer2.spotify / org.freedesktop.MediaPlayer2.Pause');
	}
	elseif($action == 'previous')
	{
		exec($qdbus . ' org.mpris.MediaPlayer2.spotify / org.freedesktop.MediaPlayer2.Previous');
	}
	elseif($action == 'next')
	{
		exec($qdbus . ' org.mpris.MediaPlayer2.spotify / org.freedesktop.MediaPlayer2.Next');
	}
	elseif($action == 'toggle_shuffle')
	{
		exec('xdotool search "^Spotify.*Linux Preview$" windowmap key --window %1 --clearmodifiers ctrl+s');
	}
	elseif($action == 'toggle_repeat')
	{
		exec('xdotool search "^Spotify.*Linux Preview$" windowmap key --window %1 --clearmodifiers ctrl+r');
	}
	elseif($action == 'adjust_spotify_volume' || $action == 'adjust_system_volume')
	{
		$volume = intval($data);

		if($pulseaudio)
		{
			$volume = $volume / 100;
			$volume = $volume * 65537;
			$volume = round($volume);

			if($volume < 0)
			{
				$volume = 0;
			}
			elseif($volume > 65537)
			{
				$volume = 65537;
			}

			if($action == 'adjust_spotify_volume')
			{
				$inputs = explode('index: ', shell_exec('pacmd list-sink-inputs'));

				foreach($inputs as $input)
				{
					if(stristr($input, 'application.name = "Spotify"'))
					{
						preg_match('/^(\d+)\n/', $input, $index);
						break;
					}
				}

				$index = (isset($index[1])) ? intval($index[1]) : 0;
				exec('pacmd set-sink-input-volume ' . $index . ' ' . $volume);
			}
			else
			{
				$sinks = shell_exec('pacmd list-sinks');
				preg_match('/\* index: (\d+)\n/', $sinks, $index);

				$index = (isset($index[1])) ? intval($index[1]) : 0;
				exec('pacmd set-sink-volume ' . $index . ' ' . $volume);
			}
		}
		else
		{
			exec('amixer set Master ' . $volume . '%');
		}
	}
	elseif($action == 'play_uri')
	{
		exec($qdbus . ' org.mpris.MediaPlayer2.spotify / org.freedesktop.MediaPlayer2.OpenUri ' . $data);
	}
	elseif($action == 'shuffle_play_uri')
	{
		exec($qdbus . ' org.mpris.MediaPlayer2.spotify / org.freedesktop.MediaPlayer2.OpenUri ' . $data);
		exec('xdotool search "^Spotify.*Linux Preview$" windowmap key --window %1 --clearmodifiers ctrl+s sleep 0.25 key --window %1 --clearmodifiers ctrl+s');
		usleep(250000);
		exec($qdbus . ' org.mpris.MediaPlayer2.spotify / org.freedesktop.MediaPlayer2.Next');
	}
	elseif($action == 'start_track_radio')
	{
		$geometry = shell_exec('xdotool search "^Spotify.*Linux Preview$" windowmap windowraise windowfocus getwindowgeometry');

		preg_match('/Geometry: \d+x(\d+)/s', $geometry, $height);

		if(!empty($height[1]))
		{
			$height = intval($height[1]) - 80;

			exec('xdotool search "^Spotify.*Linux Preview$" mousemove --window %1 --clearmodifiers 10 ' . $height);

			$data = json_decode($data, true);

			$uri = $data[0];
			$play_first = $data[1];
			$ups = intval($data[2]);

			if(string_to_boolean($play_first))
			{
				exec($qdbus . ' org.mpris.MediaPlayer2.spotify / org.freedesktop.MediaPlayer2.OpenUri ' . $uri);
				sleep(2);
			}

			$exec = 'xdotool search "^Spotify.*Linux Preview$" click --window %1 --clearmodifiers 3 sleep 0.5 ';

			for($i = 0; $i < $ups; $i++)
			{
				$exec .= 'key --window %1 --clearmodifiers Up sleep 0.25 ';
			}

			$exec .= 'key Return';

			exec($exec);
		}
	}
	elseif($action == 'get_nowplaying')
	{
		for($i = 0; $i < 4; $i++)
		{
			$return = daemon_get_nowplaying();
			if($return != $nowplaying) break;
			usleep(250000);
		}
	}
	elseif($action == 'get_current_volume')
	{
		if($pulseaudio)
		{
			if($data == 'spotify')
			{
				$inputs = explode('index: ', shell_exec('pacmd list-sink-inputs'));

				foreach($inputs as $input)
				{
					if(stristr($input, 'application.name = "Spotify"'))
					{
						preg_match('/volume:.*?(\d+)%/', $input, $volume);
						break;
					}
				}
			}
			else
			{
				preg_match('/\* index:.*?volume:.*?(\d+)%/s', shell_exec('pacmd list-sinks'), $volume);
			}
		}
		else
		{
			preg_match('/\[(\d+)%\]/', shell_exec('amixer get Master'), $volume);
		}

		$return = (isset($volume[1])) ? intval($volume[1]) : 50;
	}
	elseif($action == 'suspend_computer')
	{
		if($logind)
		{
			exec($qdbus . ' --system org.freedesktop.login1 /org/freedesktop/login1 org.freedesktop.login1.Manager.Suspend true');
		}
		else
		{
			exec($qdbus . ' --system org.freedesktop.UPower /org/freedesktop/UPower org.freedesktop.UPower.Suspend');
		}
	}
	elseif($action == 'shut_down_computer')
	{
		exec($qdbus . ' org.mpris.MediaPlayer2.spotify / org.freedesktop.MediaPlayer2.Quit');

		if($logind)
		{
			exec($qdbus . ' --system org.freedesktop.login1 /org/freedesktop/login1 org.freedesktop.login1.Manager.PowerOff true');
		}
		else
		{
			exec($qdbus . ' --system org.freedesktop.ConsoleKit /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Stop');
		}
	}

	fwrite($daemon_connect, json_encode($return));
	fclose($daemon_connect);
}

fclose($daemon_server);

?>